% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jsoncons.R
\name{version}
\alias{version}
\alias{jsonpath}
\alias{jmespath}
\title{Query the jsoncons C++ library}
\usage{
version()

jsonpath(data, path)

jmespath(data, path)
}
\arguments{
\item{data}{character(1) or list() Either a single JSON string or an R list
structure as obtained from \code{jsonlite::fromJSON}}

\item{path}{character(1) jsonpath or jmespath query string.}
}
\value{
\code{version()} returns a character(1) major.minor.patch version
string .

\code{jsonpath()} aand \code{jmespath()} return a character(1) json
string representing the result of the query.
}
\description{
\code{version()} reports the version of the C++ jsoncons library in
use.

\code{jsonpath()} executes a query against a json string using the
'jsonpath' specification

\code{jmespath()} executes a query against a json string sing the
'jmespath' specification.
}
\examples{
version()

json <- '{
  "locations": [
    {"name": "Seattle", "state": "WA"},
    {"name": "New York", "state": "NY"},
    {"name": "Bellevue", "state": "WA"},
    {"name": "Olympia", "state": "WA"}
  ]
 }'

jsonpath(json, "$..name") |>
    cat("\n")

jmespath(json, "locations[?state == 'WA'].name | sort(@)") |>
    cat("\n")

}
