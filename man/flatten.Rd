% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatten.R
\name{j_flatten}
\alias{j_flatten}
\alias{j_find_values}
\alias{j_find_values_grep}
\alias{j_find_keys}
\alias{j_find_keys_grep}
\title{Flatten and find keys or values}
\usage{
j_flatten(
  data,
  object_names = "asis",
  as = "string",
  ...,
  n_records = Inf,
  verbose = FALSE,
  data_type = j_data_type(data)
)

j_find_values(
  data,
  values,
  object_names = "asis",
  as = "list",
  data_type = j_data_type(data)
)

j_find_values_grep(
  data,
  pattern,
  ...,
  object_names = "asis",
  as = "list",
  data_type = j_data_type(data)
)

j_find_keys(
  data,
  keys,
  object_names = "asis",
  as = "list",
  data_type = j_data_type(data)
)

j_find_keys_grep(
  data,
  pattern,
  ...,
  object_names = "asis",
  as = "list",
  data_type = j_data_type(data)
)
}
\arguments{
\item{data}{a character() JSON string or NDJSON records, or the
name of a file or URL containing JSON or NDJSON, or an \emph{R}
object parsed to a JSON string using \code{jsonlite::toJSON()}.}

\item{object_names}{character(1) order \code{data} object elements
\code{"asis"} (default) or \code{"sort"} before filtering on \code{path}.}

\item{as}{character(1) describing the return type.  For
\code{j_flatten()}, either "string" or "R". For other functions on
this page, one of "list", "data.frame", or "tibble".}

\item{...}{for \code{j_find_values_grep()} and \code{j_find_keys_grep()},
additional arguments passed to \code{grepl()}.}

\item{n_records}{numeric(1) maximum number of NDJSON records parsed.}

\item{verbose}{logical(1) report progress when parsing large NDJSON
files.}

\item{data_type}{character(1) type of \code{data}; one of \code{"json"},
\code{"ndjson"}. Inferred from \code{data} using \code{j_data_type()}.}

\item{values}{vector of one or more values, all of the same type
(e.g., double, integer, character).}

\item{pattern}{character(1) regular expression to match values or
keys.}

\item{keys}{character() vector of one or more keys to be matched
exactly to path elements.}
}
\value{
\code{j_flatten()} returns a named list, where \code{names()} are the
JSONpointer paths to each element in the JSON document and list
elements are the corresponding values.

\code{j_find_values()} and \code{j_find_values_grep()} return a list
with names as JSONpointer paths and list elements the matching
values, or a \code{data.frame} or \code{tibble} with columns \code{path} and
\code{value}. Values are coerced to a common type when \code{as} is
\code{data.frame} or \code{tibble}.

\code{j_find_keys()} and \code{j_find_keys_grep()} returns a list,
data.frame, or tibble similar to \code{j_find_values()} and
\code{j_find_values_grep()}.
}
\description{
\code{j_flatten()} transforms a JSON document into a list
where names are JSONpointer 'keys' and elements are the
corresponding 'values' from the JSON document.

\code{j_find_values()} finds paths to exactly matching
values.

\code{j_find_values_grep()} finds paths to values matching
a regular expression.

\code{j_find_keys()} finds paths to exactly matching keys.

\code{j_find_keys_grep()} finds paths to keys matching a
regular expression.
}
\details{
Functions documented on this page expand \code{data} into all key /
value pairs. This is not suitable for very large JSON documents.

For \code{j_find_keys()}, the \code{key} must exactly match one or more
consecutive keys in the JSONpointer path returned by \code{j_flatten()}.

For \code{j_find_keys_grep()}, the \code{key} can define a pattern that spans
across JSONpointer path elements.
}
\examples{
json <- '{
    "discards": {
        "1000": "Record does not exist",
        "1004": "Queue limit exceeded",
        "1010": "Discarding timed-out partial msg"
    },
    "warnings": {
        "0": "Phone number missing country code",
        "1": "State code missing",
        "2": "Zip code missing"
    }
}'

j_flatten(json) |>
    str()

j_find_values(json, "Zip code missing", as = "tibble")
j_find_values(
    json,
    c("Queue limit exceeded", "Zip code missing"),
    as = "tibble"
)

j_find_values_grep(json, "missing", as = "tibble")

j_find_keys(json, "discards", as = "tibble")
j_find_keys(json, "1", as = "tibble")
j_find_keys(json, c("discards", "warnings"), as = "tibble")

j_find_keys_grep(json, "discard", as = "tibble")
j_find_keys_grep(json, "1", as = "tibble")
j_find_keys_grep(json, "car.*/101", as = "tibble")

}
