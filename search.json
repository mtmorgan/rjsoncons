[{"path":"https://mtmorgan.github.io/rjsoncons/articles/rjsoncons.html","id":"introduction-installation","dir":"Articles","previous_headings":"","what":"Introduction & installation","title":"Using the 'jsoncons' Library in R","text":"package provides header-‘jsoncons’ library manipulating JSON objects. Use rjsoncons querying JSON R objects using JMESpath JSONpath, link package direct access C++ library. Install released package version CRAN Install development version Attach installed package R session, check version C++ library use","code":"install.pacakges(\"rjsoncons\", repos = \"https://CRAN.R-project.org\") if (!requireNamespace(\"remotes\", quiety = TRUE))     install.packages(\"remotes\", repos = \"https://CRAN.R-project.org\") remotes::install_github(\"mtmorgan/rjsoncons\") library(rjsoncons) rjsoncons::version() ## [1] \"0.172.1 (update bbaf3b73b)\""},{"path":[]},{"path":"https://mtmorgan.github.io/rjsoncons/articles/rjsoncons.html","id":"json-filtering-and-transformation","dir":"Articles","previous_headings":"Use cases","what":"JSON filtering and transformation","title":"Using the 'jsoncons' Library in R","text":"simple JSON example document several common use cases. Use rjsoncons query JSON string using JSONpath JMESPath syntax filter larger documents records interest, e.g., cities New York state. Use = \"R\" argument extract deeply nested elements R objects, e.g., character vector city names Washington state. following transforms nested JSON document format can incorporated directly R data.frame. built-parse can replaced alternative parsers returning query JSON string, e.g., using fromJSON() jsonlite package. rjsoncons package particularly useful accessing elements might otherwise require complicated application nested lapply(), purrr expressions, tidyr unnest_*() (see R Data Science chapter ‘Hierarchical data’). Additional examples illustrating features available help pages, e.g., ?jmespath.","code":"json <- '{   \"locations\": [     {\"name\": \"Seattle\", \"state\": \"WA\"},     {\"name\": \"New York\", \"state\": \"NY\"},     {\"name\": \"Bellevue\", \"state\": \"WA\"},     {\"name\": \"Olympia\", \"state\": \"WA\"}   ] }' jmespath(json, \"locations[?state == 'NY']\") |>     cat(\"\\n\") ## [{\"name\":\"New York\",\"state\":\"NY\"}] jmespath(json, \"locations[?state == 'WA'].name\", as = \"R\") ## [1] \"Seattle\"  \"Bellevue\" \"Olympia\" path <- '{     name: locations[].name,     state: locations[].state }' jmespath(json, path, as = \"R\") |>     data.frame() ##       name state ## 1  Seattle    WA ## 2 New York    NY ## 3 Bellevue    WA ## 4  Olympia    WA jmespath(json, \"locations[?state == 'WA']\", as  = \"string\") |>     ## `fromJSON()` simplifies list-of-objects to data.frame     jsonlite::fromJSON() ##       name state ## 1  Seattle    WA ## 2 Bellevue    WA ## 3  Olympia    WA"},{"path":"https://mtmorgan.github.io/rjsoncons/articles/rjsoncons.html","id":"r-objects-as-input","dir":"Articles","previous_headings":"Use cases","what":"R objects as input","title":"Using the 'jsoncons' Library in R","text":"also possible use rjsoncons filter transform R objects. converted JSON using jsonlite::toJSON() queries made; toJSON() arguments like auto_unbox = TRUE can added function call.","code":"## `lst` is an *R* list lst <- jsonlite::fromJSON(json, simplifyVector = FALSE) jmespath(lst, \"locations[?state == 'WA'].name | sort(@)\", auto_unbox = TRUE) |>     cat(\"\\n\") ## [\"Bellevue\",\"Olympia\",\"Seattle\"]"},{"path":"https://mtmorgan.github.io/rjsoncons/articles/rjsoncons.html","id":"the-json-parser","dir":"Articles","previous_headings":"","what":"The JSON parser","title":"Using the 'jsoncons' Library in R","text":"package includes JSON parser, used argument = \"R\" directly as_r() main rules transformation outlined . JSON arrays single type (boolean, integer, double, string) transformed R vectors length corresponding type. JSON arrays mixing integer double values transformed R numeric vectors. JSON integer array contains value larger R’s 32-bit integer representation, array transformed R numeric vector. NOTE results loss precision JSON integer values greater 2^53. JSON objects transformed R named lists. several additional details. JSON scalar JSON vector length 1 represented way R. JSON arrays mixing types integer double transformed R lists JSON null values represented R NULL values; arrays null transformed lists Ordering object members controlled object_names= argument. default preserves names appear JSON definition; use \"sort\" sort names alphabetically. argument applied recursively. parser corresponds approximately jsonlite::fromJSON() arguments simplifyVector = TRUE, simplifyDataFrame = FALSE, simplifyMatrix = FALSE). Unit tests (using tinytest framework) providing additional details available ","code":"as_r('{\"a\": 1.0, \"b\": [2, 3, 4]}') |>     str() #> List of 2 #>  $ a: num 1 #>  $ b: int [1:3] 2 3 4 as_r('[true, false, true]') # boolean -> logical ## [1]  TRUE FALSE  TRUE as_r('[1, 2, 3]')           # integer -> integer ## [1] 1 2 3 as_r('[1.0, 2.0, 3.0]')     # double  -> numeric ## [1] 1 2 3 as_r('[\"a\", \"b\", \"c\"]')     # string  -> character ## [1] \"a\" \"b\" \"c\" as_r('[1, 2.0]') |> class() # numeric ## [1] \"numeric\" as_r('[1, 2147483648]') |> class()  # 64-bit integers -> numeric ## [1] \"numeric\" as_r('{}') ## named list() as_r('{\"a\": 1.0, \"b\": [2, 3, 4]}') |> str() ## List of 2 ##  $ a: num 1 ##  $ b: int [1:3] 2 3 4 identical(as_r(\"3.14\"), as_r(\"[3.14]\")) ## [1] TRUE as_r('[true, 1, \"a\"]') |> str() ## List of 3 ##  $ : logi TRUE ##  $ : int 1 ##  $ : chr \"a\" as_r('null')                  # NULL ## NULL as_r('[null]') |> str()       # list(NULL) ## List of 1 ##  $ : NULL as_r('[null, null]') |> str() # list(NULL, NULL) ## List of 2 ##  $ : NULL ##  $ : NULL json <- '{\"b\": 1, \"a\": {\"d\": 2, \"c\": 3}}' as_r(json) |> str() ## List of 2 ##  $ b: int 1 ##  $ a:List of 2 ##   ..$ d: int 2 ##   ..$ c: int 3 as_r(json, object_names = \"sort\") |> str() ## List of 2 ##  $ a:List of 2 ##   ..$ c: int 3 ##   ..$ d: int 2 ##  $ b: int 1 system.file(package = \"rjsoncons\", \"tinytest\", \"test_as_r.R\")"},{"path":"https://mtmorgan.github.io/rjsoncons/articles/rjsoncons.html","id":"c-library-use-in-other-packages","dir":"Articles","previous_headings":"","what":"C++ library use in other packages","title":"Using the 'jsoncons' Library in R","text":"package includes complete ‘jsoncons’ C++ header-library, available R packages adding DESCRIPTION file. Typical use R package also include LinkingTo: specifications cpp11 Rcpp (package uses cpp11) packages provide C / C++ interface R C++ ‘jsoncons’ library.","code":"LinkingTo: rjsoncons SystemRequirements: C++11"},{"path":"https://mtmorgan.github.io/rjsoncons/articles/rjsoncons.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Using the 'jsoncons' Library in R","text":"vignette compiled using following software versions","code":"sessionInfo() ## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] rjsoncons_1.1.0.9000 BiocStyle_2.30.0     ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5         cli_3.6.2           knitr_1.45          ##  [4] rlang_1.1.2         xfun_0.41           stringi_1.8.3       ##  [7] purrr_1.0.2         textshaping_0.3.7   jsonlite_1.8.8      ## [10] glue_1.6.2          htmltools_0.5.7     ragg_1.2.7          ## [13] sass_0.4.8          rmarkdown_2.25      evaluate_0.23       ## [16] jquerylib_0.1.4     fastmap_1.1.1       yaml_2.3.8          ## [19] lifecycle_1.0.4     memoise_2.0.1       bookdown_0.37       ## [22] BiocManager_1.30.22 stringr_1.5.1       compiler_4.3.2      ## [25] fs_1.6.3            systemfonts_1.0.5   digest_0.6.33       ## [28] R6_2.5.1            magrittr_2.0.3      bslib_0.6.1         ## [31] tools_4.3.2         pkgdown_2.0.7       cachem_1.0.8        ## [34] desc_1.4.3"},{"path":"https://mtmorgan.github.io/rjsoncons/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer. Marcel Ramos. Author. Daniel Parker. Author, copyright holder.            jsoncons C++ library maintainer","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M, Ramos M, Parker D (2023). rjsoncons: 'C++' Header-'jsoncons' Library 'JSON' Queries. R package version 1.1.0.9000, https://mtmorgan.github.io/rjsoncons/.","code":"@Manual{,   title = {rjsoncons: 'C++' Header-Only 'jsoncons' Library for 'JSON' Queries},   author = {Martin Morgan and Marcel Ramos and Daniel Parker},   year = {2023},   note = {R package version 1.1.0.9000},   url = {https://mtmorgan.github.io/rjsoncons/}, }"},{"path":"https://mtmorgan.github.io/rjsoncons/index.html","id":"rjsoncons","dir":"","previous_headings":"","what":"C++ Header-Only jsoncons Library for JSON Queries","title":"C++ Header-Only jsoncons Library for JSON Queries","text":"jsoncons C++ header-library constructs representations JSON character vector, provides extensions flexible queries operations JSON objects. package simple ‘R’ wrappers support JSONpath JMESpath queries JSON strings ‘R’ objects. ‘jsoncons’ library also easily linked packages direct access ‘C++’ functionality.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/index.html","id":"installation-and-loading","dir":"","previous_headings":"","what":"Installation and loading","title":"C++ Header-Only jsoncons Library for JSON Queries","text":"Install released package version CRAN Install development version Attach installed package R session ","code":"install.pacakges(\"rjsoncons\", repos = \"https://CRAN.R-project.org\") if (!requireNamespace(\"remotes\", quiety = TRUE))     install.packages(\"remotes\", repos = \"https://CRAN.R-project.org\") remotes::install_github(\"mtmorgan/rjsoncons\") library(rjsoncons)"},{"path":"https://mtmorgan.github.io/rjsoncons/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use cases","title":"C++ Header-Only jsoncons Library for JSON Queries","text":"introductory vignette outlines common use cases, including: Filtering large JSON documents extract records interest. Extracting deeply nested elements. Transforming data direct incorporation R data structures. jsoncons C++ header-library useful starting point advance JSON manipulation. vignette outlines rjsoncons can used R packages wishing access C++ library.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/index.html","id":"next-steps","dir":"","previous_headings":"","what":"Next steps","title":"C++ Header-Only jsoncons Library for JSON Queries","text":"See introductory vignette additional details.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/reference/jsoncons.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the jsoncons C++ library — version","title":"Query the jsoncons C++ library — version","text":"version() reports version C++ jsoncons library use. jsonpath() executes query JSON string using 'jsonpath' specification jmespath() executes query JSON string using 'jmespath' specification. jsonpivot() transforms JSON array--objects object--arrays; can useful forming column-based tibble row-oriented JSON. as_r() transforms JSON string R object.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/reference/jsoncons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the jsoncons C++ library — version","text":"","code":"version()  jsonpath(data, path, object_names = \"asis\", as = \"string\", ...)  jmespath(data, path, object_names = \"asis\", as = \"string\", ...)  jsonpivot(data, object_names = \"asis\", as = \"string\", ...)  as_r(data, object_names = \"asis\", ...)"},{"path":"https://mtmorgan.github.io/rjsoncons/reference/jsoncons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the jsoncons C++ library — version","text":"data R object. data scalar (length 1) character vector, treated single JSON string. Otherwise, parsed JSON string using jsonlite::toJSON(). Use () treat scalar character vector R object rather JSON string, e.g., (\"\") parsed [\"\"] processing. path character(1) jsonpath jmespath query string. object_names character(1) order data object elements \"asis\" (default) \"sort\" filtering path. character(1) return type. \"string\" returns single JSON string; \"R\" returns R object following rules outlined . ... arguments passed jsonlite::toJSON data scalar character vector. example, use auto_unbox = TRUE automatically 'unbox' vectors length 1 JSON scalar values.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/reference/jsoncons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the jsoncons C++ library — version","text":"version() returns character(1) major.minor.patch version string . jsonpath(), jmespath() jsonpivot() return character(1) JSON string (= \"string\", default) R object (= \"R\") representing result query. as_r() returns R object.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/reference/jsoncons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the jsoncons C++ library — version","text":"jsonpivot() transforms 'array--objects' (typical JSON row-oriented representation table) 'object--arrays'. simple example transforms array two objects three fields '[{\"\": 1, \"b\": 2, \"c\": 3}, {\"\": 4, \"b\": 5, \"c\": 6}]' object three fields, vector length 2 '{\"\": [1, 4], \"b\": [2, 5], \"c\": [3, 6]}'. object--arrays representation corresponds closely R data.frame tibble, illustrated examples. = \"R\" argument jsonpath(), jmespath() jsonpivot(), as_r() function transform JSON string representation R object. Main rules : JSON arrays single type (boolean, integer, double, string) transformed R vectors length corresponding type. JSON scalar JSON vector length 1 represented way R. JSON 64-bit integer array contains value larger R's 32-bit integer representation, array transformed R numeric vector. NOTE results loss precision 64-bit integer values greater 2^53. JSON arrays mixing integer double values transformed R numeric vectors. JSON objects transformed R named lists. vignette reiterates information provides additional details.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/reference/jsoncons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the jsoncons C++ library — version","text":"","code":"version() #> [1] \"0.172.1 (update bbaf3b73b)\"  json <- '{   \"locations\": [     {\"name\": \"Seattle\", \"state\": \"WA\"},     {\"name\": \"New York\", \"state\": \"NY\"},     {\"name\": \"Bellevue\", \"state\": \"WA\"},     {\"name\": \"Olympia\", \"state\": \"WA\"}   ]  }'  ## return a JSON string jsonpath(json, \"$..name\") |>     cat(\"\\n\") #> [\"Seattle\",\"New York\",\"Bellevue\",\"Olympia\"]   ## return an R object jsonpath(json, \"$..name\", as = \"R\") #> [1] \"Seattle\"  \"New York\" \"Bellevue\" \"Olympia\"   ## create a list with state and name as scalar vectors lst <- jsonlite::fromJSON(json, simplifyVector = FALSE)  ## objects other than scalar character vectors are automatically ## coerced to JSON; use `auto_unbox = TRUE` to represent R scalar ## vectors in the object as JSON scalar vectors jsonpath(lst, \"$..name\", auto_unbox = TRUE) |>     cat(\"\\n\") #> [\"Seattle\",\"New York\",\"Bellevue\",\"Olympia\"]   ## a scalar character vector like \"Seattle\" is not valid JSON... try(jsonpath(\"Seattle\", \"$\")) #> Error : JSON syntax_error at line 1 and column 1 ## ...but a double-quoted string is jsonpath('\"Seattle\"', \"$\") #> [1] \"[\\\"Seattle\\\"]\"  ## use I(\"Seattle\") to coerce to a JSON object [\"Seattle\"] jsonpath(I(\"Seattle\"), \"$[0]\")      |> cat(\"\\n\") #> [\"Seattle\"]   ## different ordering of object names -- 'asis' (default) or 'sort' json_obj <- '{\"b\": \"1\", \"a\": \"2\"}' jsonpath(json_obj, \"$\")             |> cat(\"\\n\") #> [{\"b\":\"1\",\"a\":\"2\"}]  jsonpath(json_obj, \"$.*\")           |> cat(\"\\n\") #> [\"1\",\"2\"]  jsonpath(json_obj, \"$\", \"sort\")   |> cat(\"\\n\") #> [{\"a\":\"2\",\"b\":\"1\"}]  jsonpath(json_obj, \"$.*\", \"sort\") |> cat(\"\\n\") #> [\"2\",\"1\"]   path <- \"locations[?state == 'WA'].name | sort(@)\" jmespath(json, path) |>     cat(\"\\n\") #> [\"Bellevue\",\"Olympia\",\"Seattle\"]   ## original filter always fails, e.g., '[\"WA\"] != 'WA' jmespath(lst, path)  # empty result set, '[]' #> [1] \"[]\"  ## filter with unboxed state, and return unboxed name jmespath(lst, \"locations[?state[0] == 'WA'].name[0] | sort(@)\") |>     cat(\"\\n\") #> [\"Bellevue\",\"Olympia\",\"Seattle\"]   ## automatically unbox scalar values when creating the JSON string jmespath(lst, path, auto_unbox = TRUE) |>     cat(\"\\n\") #> [\"Bellevue\",\"Olympia\",\"Seattle\"]   json |>     ## 'locations' is a array of objects with 'name' and 'state' scalars...     jmespath(\"locations\") |>     ## ...pivot to a single object with 'name' and 'state' vectors...     jsonpivot(as = \"R\") |>     ## ... easily coerced to a data.frame or dplyr::tibble     as.data.frame() #>       name state #> 1  Seattle    WA #> 2 New York    NY #> 3 Bellevue    WA #> 4  Olympia    WA  ## as_r() as_r('[1, 2, 3]')       # JSON integer array -> R integer vector #> [1] 1 2 3 as_r('[1, 2.0, 3]')     # JSON intger and double array -> R numeric vector #> [1] 1 2 3 as_r('[1, 2.0, \"3\"]')   # JSON mixed array -> R list #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] \"3\" #>  as_r('[1, 2147483648]') # JSON integer > R integer max -> R numeric vector #> [1]          1 2147483648  json = '{\"b\": 1, \"a\": [\"c\", \"d\"], \"e\": true, \"f\": [true], \"g\": {}}' as_r(json) |> str()     # parsing complex objects #> List of 5 #>  $ b: int 1 #>  $ a: chr [1:2] \"c\" \"d\" #>  $ e: logi TRUE #>  $ f: logi TRUE #>  $ g: Named list() identical(              # JSON scalar and length 1 array identical in R     as_r('{\"a\": 1}'), as_r('{\"a\": [1]}') ) #> [1] TRUE"},{"path":"https://mtmorgan.github.io/rjsoncons/news/index.html","id":"rjsoncons-120","dir":"Changelog","previous_headings":"","what":"rjsoncons 1.2.0","title":"rjsoncons 1.2.0","text":"(v.1.1.0.9000) implement jsonpivot() transform JSON array--objects object--arrays, common step representation data.frame.","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/news/index.html","id":"rjsoncons-110","dir":"Changelog","previous_headings":"","what":"rjsoncons 1.1.0","title":"rjsoncons 1.1.0","text":"CRAN release: 2023-12-11 (1.1.0) CRAN release (1.0.1.9100) using jsonlite (e.g., ‘toJSON()’ parsing R objects) requires separate installation jsonlite. (1.0.1.9000) update jsoncons library 0.172.1; addresses segfault ‘fedora’ CRAN builder","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/news/index.html","id":"rjsoncons-101","dir":"Changelog","previous_headings":"","what":"rjsoncons 1.0.1","title":"rjsoncons 1.0.1","text":"CRAN release: 2023-12-03 (1.0.1) CRAN release (1.0.0.9200) use pkgdown (1.0.0.9100) parse JSON R = \"R\" argument as_r()","code":""},{"path":"https://mtmorgan.github.io/rjsoncons/news/index.html","id":"rjsoncons-100","dir":"Changelog","previous_headings":"","what":"rjsoncons 1.0.0","title":"rjsoncons 1.0.0","text":"CRAN release: 2022-09-29 (1.0.0) initial CRAN release (0.0.99) pre-release version (0.0.3) support object names ordering ‘asis’ ‘sort’ (0.0.3) DESCRIPTION file updates: correct ‘Title:’ capitalization; avoid warnings misspellings (0.0.3) Add github action rebuild README.md vignettes/rjsoncons.Rmd (0.0.2) jsoncons library update (0.0.2) support R object query addition JSON string (0.0.2) add unit tests (0.0.2) R minor C++ code refactoring (0.0.1) initial C++ / R implementation jmespath() / jsonpath()","code":""}]
